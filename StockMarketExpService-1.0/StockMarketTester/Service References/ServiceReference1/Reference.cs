//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockMarketTester.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockName", Namespace="http://schemas.datacontract.org/2004/07/StockMarketExpService")]
    [System.SerializableAttribute()]
    public partial class StockName : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SName {
            get {
                return this.SNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SNameField, value) != true)) {
                    this.SNameField = value;
                    this.RaisePropertyChanged("SName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IStockExpService")]
    public interface IStockExpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/GetValuesfromDB", ReplyAction="http://tempuri.org/IStockExpService/GetValuesfromDBResponse")]
        float[] GetValuesfromDB(int highdays, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/GetValuesfromDB", ReplyAction="http://tempuri.org/IStockExpService/GetValuesfromDBResponse")]
        System.Threading.Tasks.Task<float[]> GetValuesfromDBAsync(int highdays, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/GetComboValuesfromDB", ReplyAction="http://tempuri.org/IStockExpService/GetComboValuesfromDBResponse")]
        StockMarketTester.ServiceReference1.StockName[] GetComboValuesfromDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/GetComboValuesfromDB", ReplyAction="http://tempuri.org/IStockExpService/GetComboValuesfromDBResponse")]
        System.Threading.Tasks.Task<StockMarketTester.ServiceReference1.StockName[]> GetComboValuesfromDBAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/CalCulateAverage", ReplyAction="http://tempuri.org/IStockExpService/CalCulateAverageResponse")]
        System.Collections.Generic.KeyValuePair<float, float> CalCulateAverage(int lowerDay, int highdays, float[] dbvalues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/CalCulateAverage", ReplyAction="http://tempuri.org/IStockExpService/CalCulateAverageResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<float, float>> CalCulateAverageAsync(int lowerDay, int highdays, float[] dbvalues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/GetResult", ReplyAction="http://tempuri.org/IStockExpService/GetResultResponse")]
        int GetResult(float niftyvalue, float avg1, float avg2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockExpService/GetResult", ReplyAction="http://tempuri.org/IStockExpService/GetResultResponse")]
        System.Threading.Tasks.Task<int> GetResultAsync(float niftyvalue, float avg1, float avg2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockExpServiceChannel : StockMarketTester.ServiceReference1.IStockExpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockExpServiceClient : System.ServiceModel.ClientBase<StockMarketTester.ServiceReference1.IStockExpService>, StockMarketTester.ServiceReference1.IStockExpService {
        
        public StockExpServiceClient() {
        }
        
        public StockExpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockExpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockExpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockExpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float[] GetValuesfromDB(int highdays, string date) {
            return base.Channel.GetValuesfromDB(highdays, date);
        }
        
        public System.Threading.Tasks.Task<float[]> GetValuesfromDBAsync(int highdays, string date) {
            return base.Channel.GetValuesfromDBAsync(highdays, date);
        }
        
        public StockMarketTester.ServiceReference1.StockName[] GetComboValuesfromDB() {
            return base.Channel.GetComboValuesfromDB();
        }
        
        public System.Threading.Tasks.Task<StockMarketTester.ServiceReference1.StockName[]> GetComboValuesfromDBAsync() {
            return base.Channel.GetComboValuesfromDBAsync();
        }
        
        public System.Collections.Generic.KeyValuePair<float, float> CalCulateAverage(int lowerDay, int highdays, float[] dbvalues) {
            return base.Channel.CalCulateAverage(lowerDay, highdays, dbvalues);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<float, float>> CalCulateAverageAsync(int lowerDay, int highdays, float[] dbvalues) {
            return base.Channel.CalCulateAverageAsync(lowerDay, highdays, dbvalues);
        }
        
        public int GetResult(float niftyvalue, float avg1, float avg2) {
            return base.Channel.GetResult(niftyvalue, avg1, avg2);
        }
        
        public System.Threading.Tasks.Task<int> GetResultAsync(float niftyvalue, float avg1, float avg2) {
            return base.Channel.GetResultAsync(niftyvalue, avg1, avg2);
        }
    }
}
